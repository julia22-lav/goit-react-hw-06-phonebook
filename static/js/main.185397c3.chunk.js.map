{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","types","payload","name","number","id","genId","deleteContact","filterChange","ContactForm","state","onChange","event","preventDefault","console","dir","currentTarget","value","currentState","upadateState","setState","onSubmit","props","reset","nameId","telId","this","className","s","contactForm","htmlFor","labelForm","type","inputForm","buttonForm","Component","connect","dispatch","contact","actions","ContactListItem","listItem","onClick","buttonListItem","ContactList","contacts","map","getContactsToShow","filter","items","normalizedFilter","toLowerCase","includes","contactId","Filter","filterInputId","filterState","labelFilter","inputFilter","target","App","itemsReducer","createReducer","find","alert","filterReducer","_","contactsReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.185397c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__2VITd\",\"labelForm\":\"ContactForm_labelForm__28Ha4\",\"inputForm\":\"ContactForm_inputForm__3j8ux\",\"buttonForm\":\"ContactForm_buttonForm__3Hm41\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__ALzjE\",\"buttonListItem\":\"ContactListItem_buttonListItem__1vmG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelFilter\":\"Filter_labelFilter__2SJcl\",\"inputFilter\":\"Filter_inputFilter__20b0Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__PMQkn\"};","/* eslint-disable import/no-anonymous-default-export */\r\nexport default {\r\n  AddContact: 'contacts/AddContact',\r\n  DeleteContact: 'contacts/DeleteContact',\r\n  FilterChange: 'contacts/FilterChange',\r\n};\r\n","import types from './contacts-types';\r\nimport { v4 as genId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addContact = ({ name, number, id }) => {\r\n//   return {\r\n//     type: types.AddContact,\r\n//     payload: { name, number, id: genId() },\r\n//   };\r\n// };\r\n\r\nconst addContact = createAction(types.AddContact, ({ name, number }) => {\r\n  return { payload: { name, number, id: genId() } };\r\n});\r\n\r\n// const deleteContact = contactId => {\r\n//   return {\r\n//     type: types.DeleteContact,\r\n//     payload: contactId,\r\n//   };\r\n// };\r\n\r\nconst deleteContact = createAction(types.DeleteContact);\r\n\r\n// const filterChange = value => {\r\n//   return {\r\n//     type: types.FilterChange,\r\n//     payload: value,\r\n//   };\r\n// };\r\n\r\nconst filterChange = createAction(types.FilterChange);\r\n\r\nexport default { addContact, deleteContact, filterChange };\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  onChange = event => {\r\n    event.preventDefault();\r\n    console.dir(event.currentTarget);\r\n    const { value, name } = event.currentTarget;\r\n    const currentState = this.state;\r\n    const upadateState = { [name]: value };\r\n    this.setState({ ...currentState, ...upadateState });\r\n  };\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const nameId = genId();\r\n    const telId = genId();\r\n    return (\r\n      <form onSubmit={this.onSubmit} className={s.contactForm}>\r\n        <label htmlFor={nameId} className={s.labelForm}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id={nameId}\r\n            value={this.state.name}\r\n            onChange={this.onChange}\r\n            className={s.inputForm}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={telId} className={s.labelForm}>\r\n          Tel\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            id={telId}\r\n            value={this.state.number}\r\n            // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            onChange={this.onChange}\r\n            className={s.inputForm}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.buttonForm}>\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(actions.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactListItem.module.css';\r\n\r\nclass ContactListItem extends Component {\r\n  render() {\r\n    const { id, name, number, deleteContact } = this.props;\r\n    return (\r\n      <li id={id} className={s.listItem}>\r\n        {name}:{number}\r\n        <button\r\n          onClick={() => {\r\n            deleteContact(id);\r\n          }}\r\n          className={s.buttonListItem}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n};\r\nexport default ContactListItem;\r\n","import { Component } from 'react';\r\nimport ContactListItem from '../ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nclass ContactList extends Component {\r\n  render() {\r\n    const { contacts, deleteContact } = this.props;\r\n\r\n    return (\r\n      <ul>\r\n        {contacts.map(({ name, number, id }) => {\r\n          return (\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              key={id}\r\n              id={id}\r\n              deleteContact={deleteContact}\r\n              className={s.ContactList}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getContactsToShow = ({ filter, items }) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(({ name }) =>\r\n    name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getContactsToShow(state.contacts),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: contactId => dispatch(actions.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    const filterInputId = genId();\r\n    const { filterState, filterChange } = this.props;\r\n\r\n    return (\r\n      <label htmlFor={filterInputId} className={s.labelFilter}>\r\n        Search Contacts by Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          id={filterInputId}\r\n          value={filterState}\r\n          onChange={filterChange}\r\n          className={s.inputFilter}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filters: PropTypes.string,\r\n  filterChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import './App.css';\nimport { Component } from 'react';\nimport ContactForm from './components/ContactForm';\n// import { v4 as genId } from 'uuid';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const parsedContacts = JSON.parse(localStorage.getItem(`contacts`));\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addNewContact = ({ name, number }) => {\n  //   const nameList = this.state.contacts.map(contact => contact.name);\n  //   if (nameList.includes(name)) {\n  //     alert(`${name} already in your contact list`);\n  //     return;\n  //   }\n\n  //   this.setState(prevState => ({\n  //     contacts: [...prevState.contacts, { name, id: genId(), number }],\n  //   }));\n  // };\n\n  // contactsToShow = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(({ name }) => {\n  //     return name ? name.toLowerCase().includes(normalizedFilter) : false;\n  //   });\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => {\n  //     return {\n  //       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n  //     };\n  //   });\n  // };\n\n  // filterChange = event => {\n  //   this.setState({ filter: event.currentTarget.value });\n  // };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.AddContact:\r\n//       if (state.find(contact => contact.name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return state;\r\n//       }\r\n//       return [...state, payload];\r\n//     case types.DeleteContact:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    if (state.find(contact => contact.name === payload.name)) {\r\n      alert(`${payload.name} is already in contacts.`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FilterChange:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.filterChange]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst rootReducer = {\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}